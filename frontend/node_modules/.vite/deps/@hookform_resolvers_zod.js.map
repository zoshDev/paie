{
  "version": 3,
  "sources": ["../../@hookform/resolvers/zod/src/zod.ts"],
  "sourcesContent": ["import { toNestErrors, validateFieldsNatively } from '@hookform/resolvers';\nimport {\n  FieldError,\n  FieldErrors,\n  FieldValues,\n  Resolver,\n  ResolverError,\n  ResolverSuccess,\n  appendErrors,\n} from 'react-hook-form';\nimport { ZodError, z } from 'zod';\n\nconst isZodError = (error: any): error is ZodError =>\n  Array.isArray(error?.errors);\n\nfunction parseErrorSchema(\n  zodErrors: z.ZodIssue[],\n  validateAllFieldCriteria: boolean,\n) {\n  const errors: Record<string, FieldError> = {};\n  for (; zodErrors.length; ) {\n    const error = zodErrors[0];\n    const { code, message, path } = error;\n    const _path = path.join('.');\n\n    if (!errors[_path]) {\n      if ('unionErrors' in error) {\n        const unionError = error.unionErrors[0].errors[0];\n\n        errors[_path] = {\n          message: unionError.message,\n          type: unionError.code,\n        };\n      } else {\n        errors[_path] = { message, type: code };\n      }\n    }\n\n    if ('unionErrors' in error) {\n      error.unionErrors.forEach((unionError) =>\n        unionError.errors.forEach((e) => zodErrors.push(e)),\n      );\n    }\n\n    if (validateAllFieldCriteria) {\n      const types = errors[_path].types;\n      const messages = types && types[error.code];\n\n      errors[_path] = appendErrors(\n        _path,\n        validateAllFieldCriteria,\n        errors,\n        code,\n        messages\n          ? ([] as string[]).concat(messages as string[], error.message)\n          : error.message,\n      ) as FieldError;\n    }\n\n    zodErrors.shift();\n  }\n\n  return errors;\n}\n\nexport function zodResolver<Input extends FieldValues, Context, Output>(\n  schema: z.ZodSchema<Output, any, Input>,\n  schemaOptions?: Partial<z.ParseParams>,\n  resolverOptions?: {\n    mode?: 'async' | 'sync';\n    raw?: false;\n  },\n): Resolver<Input, Context, Output>;\n\nexport function zodResolver<Input extends FieldValues, Context, Output>(\n  schema: z.ZodSchema<Output, any, Input>,\n  schemaOptions: Partial<z.ParseParams> | undefined,\n  resolverOptions: {\n    mode?: 'async' | 'sync';\n    raw: true;\n  },\n): Resolver<Input, Context, Input>;\n\n/**\n * Creates a resolver function for react-hook-form that validates form data using a Zod schema\n * @param {z.ZodSchema<Input>} schema - The Zod schema used to validate the form data\n * @param {Partial<z.ParseParams>} [schemaOptions] - Optional configuration options for Zod parsing\n * @param {Object} [resolverOptions] - Optional resolver-specific configuration\n * @param {('async'|'sync')} [resolverOptions.mode='async'] - Validation mode. Use 'sync' for synchronous validation\n * @param {boolean} [resolverOptions.raw=false] - If true, returns the raw form values instead of the parsed data\n * @returns {Resolver<z.output<typeof schema>>} A resolver function compatible with react-hook-form\n * @throws {Error} Throws if validation fails with a non-Zod error\n * @example\n * const schema = z.object({\n *   name: z.string().min(2),\n *   age: z.number().min(18)\n * });\n *\n * useForm({\n *   resolver: zodResolver(schema)\n * });\n */\nexport function zodResolver<Input extends FieldValues, Context, Output>(\n  schema: z.ZodSchema<Output, any, Input>,\n  schemaOptions?: Partial<z.ParseParams>,\n  resolverOptions: {\n    mode?: 'async' | 'sync';\n    raw?: boolean;\n  } = {},\n): Resolver<Input, Context, Output | Input> {\n  return async (values: Input, _, options) => {\n    try {\n      const data = await schema[\n        resolverOptions.mode === 'sync' ? 'parse' : 'parseAsync'\n      ](values, schemaOptions);\n\n      options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n      return {\n        errors: {} as FieldErrors,\n        values: resolverOptions.raw ? Object.assign({}, values) : data,\n      } satisfies ResolverSuccess<Output | Input>;\n    } catch (error) {\n      if (isZodError(error)) {\n        return {\n          values: {},\n          errors: toNestErrors(\n            parseErrorSchema(\n              error.errors,\n              !options.shouldUseNativeValidation &&\n                options.criteriaMode === 'all',\n            ),\n            options,\n          ),\n        } satisfies ResolverError<Input>;\n      }\n\n      throw error;\n    }\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;AAeA,SAASA,EACPC,GACAC,GAAAA;AAGA,WADMC,KAAqC,CAAE,GACtCF,EAAUG,UAAU;AACzB,QAAMC,KAAQJ,EAAU,CAAA,GAChBK,IAAwBD,GAAxBC,MAAMC,IAAkBF,GAAlBE,SACRC,IAD0BH,GAATI,KACJC,KAAK,GAAA;AAExB,QAAA,CAAKP,GAAOK,CAAAA,EACV,KAAI,iBAAiBH,IAAO;AAC1B,UAAMM,IAAaN,GAAMO,YAAY,CAAA,EAAGT,OAAO,CAAA;AAE/CA,MAAAA,GAAOK,CAAAA,IAAS,EACdD,SAASI,EAAWJ,SACpBM,MAAMF,EAAWL,KAAAA;IAErB,MACEH,CAAAA,GAAOK,CAAAA,IAAS,EAAED,SAAAA,GAASM,MAAMP,EAAAA;AAUrC,QANI,iBAAiBD,MACnBA,GAAMO,YAAYE,QAAQ,SAACH,IAAAA;AACzB,aAAAA,GAAWR,OAAOW,QAAQ,SAACC,IAAAA;AAAC,eAAKd,EAAUe,KAAKD,EAAAA;MAAE,CAAA;IAAC,CAAA,GAInDb,GAA0B;AAC5B,UAAMe,IAAQd,GAAOK,CAAAA,EAAOS,OACtBC,IAAWD,KAASA,EAAMZ,GAAMC,IAAAA;AAEtCH,MAAAA,GAAOK,CAAAA,IAASW,aACdX,GACAN,GACAC,IACAG,GACAY,IACK,CAAA,EAAgBE,OAAOF,GAAsBb,GAAME,OAAAA,IACpDF,GAAME,OAAAA;IAEd;AAEAN,MAAUoB,MAAAA;EACZ;AAEA,SAAOlB;AACT;AAuCM,SAAUmB,GACdC,IACAC,IACAC,GAAAA;AAKA,SAAA,WALAA,MAAAA,IAGI,CAAE,IAEQC,SAAAA,GAAeC,GAAGC,GAAAA;AAAW,QAAA;AAAA,aAAAC,QAAAC,QAAAA,SAAAA,GAAAA,IAAAA;AAAAA,YAAAA;AAAAA,cAAAA,KACrCD,QAAAC,QACiBP,GACQ,WAAzBE,EAAgBM,OAAkB,UAAU,YAAA,EAC5CL,GAAQF,EAAAA,CAAAA,EAAcQ,KAFlBC,SAAAA,IAAAA;AAMN,mBAFAL,EAAQM,6BAA6BC,EAAuB,CAAA,GAAIP,CAAAA,GAEzD,EACLzB,QAAQ,CAAA,GACRuB,QAAQD,EAAgBW,MAAMC,OAAOC,OAAO,CAAE,GAAEZ,CAAAA,IAAUO,GAAAA;UAChB,CAAA;QAAA,SAAA,GAAA;AAAA,iBAAAM,GAAA,CAAA;QAAA;AAAA,eAAAC,MAAAA,GAAA,OAAAA,GAAA,KAAA,QAAAD,EAAA,IAAAC;MAAA,EAXL,GAYhCnC,SAAAA,GAAAA;AACP,YA/Ga,SAACA,IAAAA;AAClB,iBAAAoC,MAAMC,QAAa,QAALrC,KAAAA,SAAAA,GAAOF,MAAAA;QAAO,EA8GTE,CAAAA,EACb,QAAO,EACLqB,QAAQ,CAAA,GACRvB,QAAQwC,EACN3C,EACEK,EAAMF,QAAAA,CACLyB,EAAQM,6BACkB,UAAzBN,EAAQgB,YAAAA,GAEZhB,CAAAA,EAAAA;AAKN,cAAMvB;MACR,CAAA,CAAA;IACF,SAACU,GAAAA;AAAAc,aAAAA,QAAAgB,OAAA9B,CAAAA;IACH;EAAA;AAAA;",
  "names": ["parseErrorSchema", "zodErrors", "validateAllFieldCriteria", "errors", "length", "error", "code", "message", "_path", "path", "join", "unionError", "unionErrors", "type", "forEach", "e", "push", "types", "messages", "appendErrors", "concat", "shift", "zodResolver", "schema", "schemaOptions", "resolverOptions", "values", "_", "options", "Promise", "resolve", "mode", "then", "data", "shouldUseNativeValidation", "validateFieldsNatively", "raw", "Object", "assign", "n", "a", "Array", "isArray", "toNestErrors", "criteriaMode", "reject"]
}
