import { useEffect, useState } from "react";

// üß© Type g√©n√©rique pour les √©l√©ments √† s√©lectionner (ex: r√¥les, √©l√©ments de salaire)
interface Item {
  id: number;
  label: string;
}

// üß† Props du composant : enti√®rement g√©n√©riques et r√©utilisables
interface Props {
  sourceId: number;                   // ID de l'entit√© source (ex: employ√©)
  sourceLabel: string;               // Libell√© affich√© (ex: "Employ√©")
  targetLabel: string;               // Type d'entit√© cibl√©e (ex: "Profil de paie")

  fetchLinked: () => Promise<Item[]>;    // Fonction pour r√©cup√©rer les √©l√©ments d√©j√† li√©s
  fetchAvailable: () => Promise<Item[]>; // Fonction pour r√©cup√©rer tous les √©l√©ments disponibles
  onSave: (linkedIds: number[]) => Promise<void>; // Fonction pour sauvegarder la liaison

  multiple?: boolean;                // Permet de choisir entre select ou multiselect
  filterPlaceholder?: string;        // Texte du champ de recherche
}

export function EntityLinker({
  sourceId,
  sourceLabel,
  targetLabel,
  fetchLinked,
  fetchAvailable,
  onSave,
  multiple = false,
  filterPlaceholder = "Rechercher...",
}: Props) {
  // üß† √âtats internes pour stocker les donn√©es et la s√©lection
  const [linkedItems, setLinkedItems] = useState<Item[]>([]);         // √©l√©ments actuellement li√©s
  const [availableItems, setAvailableItems] = useState<Item[]>([]);   // √©l√©ments disponibles pour liaison
  const [selectedIds, setSelectedIds] = useState<number[]>([]);       // IDs s√©lectionn√©s pour liaison
  const [filter, setFilter] = useState("");                           // filtre texte pour recherche

  const [loading, setLoading] = useState(true);                       // √©tat de chargement initial
  const [saving, setSaving] = useState(false);                       // √©tat de sauvegarde en cours

  // üîÅ Chargement initial des donn√©es li√©es et disponibles
  useEffect(() => {
    async function load() {
    try {
      const [linked, available] = await Promise.all([
        fetchLinked(),     // √©l√©ments d√©j√† li√©s √† sourceId
        fetchAvailable()   // tous les √©l√©ments disponibles dans le syst√®me
      ]);

      console.log("[üß© EntityLinker] linked:", linked);
      console.log("[üß© EntityLinker] available:", available);

      setLinkedItems(linked);
      setAvailableItems(available);
      setSelectedIds(linked.map((i) => i.id)); // pr√©-remplir la s√©lection avec les √©l√©ments d√©j√† li√©s
    } catch (error) {
      console.error("[‚ùå EntityLinker] Erreur lors du chargement :", error);
    } finally {
      setLoading(false);
    }
  }
    load();
  }, []);

  // üíæ Sauvegarde des nouvelles liaisons
  const handleSave = async () => {
    setSaving(true);
    await onSave(selectedIds);     // envoie les IDs s√©lectionn√©s au backend
    setSaving(false);
  };

  // üîç Filtrage local des options disponibles selon le texte saisi
  const filtered = availableItems.filter((item) =>
    item.label.toLowerCase().includes(filter.toLowerCase())
  );

  // üñ±Ô∏è Mise √† jour des √©l√©ments s√©lectionn√©s depuis le `select`
  const handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const values = Array.from(e.target.selectedOptions).map((opt) => Number(opt.value));
    setSelectedIds(multiple ? values : [values[0]]); // g√®re select ou multiselect selon la prop
  };

  return (
    <div className="space-y-4 text-sm">
      {/* üßæ Titre contextuel pour afficher ce qu'on lie √† quoi */}
      <h3 className="text-base font-semibold text-indigo-700">
        Lier {targetLabel} √† {sourceLabel} #{sourceId}
      </h3>

      {/* ‚è≥ Loader pendant le fetch initial */}
      {loading ? (
        <p className="text-gray-500">Chargement...</p>
      ) : (
        <>
          {/* üîç Champ de recherche/filter */}
          <input
            type="text"
            value={filter}
            onChange={(e) => setFilter(e.target.value)}
            placeholder={filterPlaceholder}
            className="border px-2 py-1 rounded w-full"
          />

          {/* üß† S√©lecteur simple ou multi selon la prop `multiple` */}
          <select
            multiple={multiple}
            value={selectedIds.map(String)}
            onChange={handleChange}
            className="border p-2 rounded w-full h-40"
          >
            {filtered.map((item) => (
              <option key={item.id} value={item.id}>
                {item.label}
              </option>
            ))}
          </select>

          {/* üíæ Bouton de sauvegarde des liaisons */}
          <button
            onClick={handleSave}
            disabled={saving}
            className="bg-indigo-600 text-white px-4 py-2 rounded hover:bg-indigo-700 disabled:opacity-50"
          >
            {saving ? "Sauvegarde..." : "Sauvegarder les liaisons"}
          </button>
        </>
      )}
    </div>
  );
}
